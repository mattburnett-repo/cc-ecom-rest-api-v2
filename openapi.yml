openapi: "3.0.0"

info:
  title: "E-commerce REST API"
  version: "1.0.0"
  description: "Generic endpoints for an e-commerce REST API. The 'Could not render n, see the console.' errors are a bug in the Swagger platform, afaik."

servers:
  - url: http://localhost:4000
    description: Local dev server. No SSL. You probably can't see this.
  - url: https://e-commerce-rest-api-v2.herokuapp.com
    description: Production server. Should provide SSL.

tags:
- name: "cart"
  description: "User cart endpoint"
- name: "login"
  description: "Login endpoint"
- name: "order"
  description: "Order endpoint"
- name: "product"
  description: "Product endpoint"
- name: "register"
  description: "Register endpoint"
- name: "user"
  description: "User endpoint"

security:
  - BasicAuth: []

paths:
  /api/v1/cart:
    get:
      tags: 
      - "cart"
      summary: "Get all carts"
      description: "Get all carts without an order date"
      parameters: []
      responses:
        $ref: '#/components/responses/200-204-400'
    post:
      tags: 
      - "cart"
      summary: "Add item to a cart"
      requestBody:
        $ref: '#/components/requestBodies/CartItem'
      responses:
        $ref: '#/components/responses/200-400'
    put:
      tags: 
      - "cart"
      summary: "Update a cart item"
      description: "Update a cart item's quantity and line item price"
      requestBody:
        $ref: '#/components/requestBodies/CartItem'
      responses:
        $ref: '#/components/responses/200-204-400'
    delete:
      tags: 
      - "cart"
      summary: "Delete a cart item"
      description: "Delete a cart item"
      requestBody:
        $ref: '#/components/requestBodies/CartID_ProductID'
      responses:
        $ref: '#/components/responses/200-400'
  /api/v1/cart/{cart_id}:
    get:
      tags: 
        - "cart"
      summary: "Get a cart by id"
      description: "Get a cart by cart id"
      parameters:
        - name: cart_id
          in: path
          required: true
          description: Id of cart to retrieve.
          schema:
            type : integer
            format: int64
            minimum: 1
      responses:
        $ref: '#/components/responses/200-204-400'
  /api/v1/login:
    get:
      tags: 
      - "login"
      summary: "Show default page"
      description: "Show login page"
      parameters: []
      responses:
        $ref: '#/components/responses/200-400'
    post:
      tags: 
      - "login"
      summary: "Login"
      description: "Log in a user with provided username/password and auth via passport"
      requestBody:
        $ref: '#/components/requestBodies/UserPassword'
      responses:
        $ref: '#/components/responses/200-400-401'
  /api/v1/order:
    get:
      tags: 
      - "order"
      summary: "Get orders"
      description: "Get all orders in the database"
      parameters: []
      responses:
        $ref: '#/components/responses/200-400'
    post:
      tags: 
      - "order"
      summary: "Create an order"
      description: "Create an order from a user's cart"
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        $ref: '#/components/responses/200-400'
    delete:
      tags: 
      - "order"
      summary: "Delete order"
      description: "Delete an order by id"
      requestBody:
          $ref: '#/components/requestBodies/OrderID'
      responses:
        $ref: '#/components/responses/200-400'
  /api/v1/order/{order_id}:
    get:
      tags: 
      - "order"
      summary: "Get order by id"
      description: "Get an order by id"
      parameters:
        - name: order_id
          in: path
          required: true
          description: Id of order to retrieve.
          schema:
            type : integer
            format: int64
            minimum: 1
      responses:
        $ref: '#/components/responses/200-400'
  /api/v1/product:
    get:
      tags: 
      - "product"
      summary: "Get products"
      description: "Get all products in the database"
      parameters: []
      responses:
        $ref: '#/components/responses/200-400'
    post:
      tags: 
      - "product"
      summary: "Add a product"
      description: "Add a product to the database"
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        $ref: '#/components/responses/201-400'
    put:
      tags: 
      - "product"
      summary: "Update"
      description: "Update a product's name / description / price"
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        $ref: '#/components/responses/200-204-400'
    delete:
      tags: 
      - "product"
      summary: "Delete product"
      description: "Delete product from the database"
      requestBody:
          $ref: '#/components/requestBodies/ProductID'
      responses:
        $ref: '#/components/responses/204-400'
  /api/v1/product/{productID}:
    get:
      tags: 
      - "product"
      summary: "Get product"
      description: "Get a product by id"
      parameters:
        - name: productID
          in: path
          required: true
          description: Id of product to retrieve.
          schema:
            type : integer
            format: int64
            minimum: 1
      responses:
        $ref: '#/components/responses/200-400'
  /api/v1/register:
    get:
      tags: 
      - "register"
      summary: "Get"
      description: "Displays register form page"
      responses:
        $ref: '#/components/responses/200-400'
    post:
      tags: 
      - "register"
      summary: "Add user"
      description: "Adds user to database"
      requestBody:
        $ref: '#/components/requestBodies/UserEmailPassword'
      responses:
        $ref: '#/components/responses/200-400'
  /api/v1/user:
    get:
      tags: 
      - "user"
      summary: "Get all users"
      description: "Get all users from the database"
      parameters: []
      responses:
        $ref: '#/components/responses/200-204-400'
    post:
      tags: 
      - "user"
      summary: "Create a user"
      description: "Add a user record to the database"
      requestBody:
        $ref: '#/components/requestBodies/UserEmailPassword'
      responses:
        $ref: '#/components/responses/201-400'
    put:
      tags: 
      - "user"
      summary: "Update a user"
      description: "Update a user record in the database"
      requestBody:
        $ref: '#/components/requestBodies/UserIdEmailPassword'
      responses:
        $ref: '#/components/responses/200-204-400'
    delete:
      tags: 
      - "user"
      summary: "Delete a user"
      description: "Delete a user record from the database"
      requestBody:
        $ref: '#/components/requestBodies/UserID'
      responses:
        $ref: '#/components/responses/200-400'
  /api/v1/user/{userID}:
    get:
      tags: 
      - "user"
      summary: "Get a user"
      description: "Get a user record from the database"
      parameters:
      - name: userID
        in: path
        required: true
        description: Id of user to retrieve.
        schema:
          type : integer
          format: int64
          minimum: 1
      responses:
        $ref: '#/components/responses/200-400'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  responses:
    200-400:
      description: Success / Bad request responses
      200: 
        description: 200 Success
      400: 
        description: 400 Bad request
    200-204-400:
      description: Success / No content / Bad request responses
      200: 
        description: 200 Success
      204: 
        description: 204 No Content
      400: 
        description: 400 Bad request
    200-400-401:
      description: Success / Not Authorized / Bad request responses
      200: 
        description: 200 Success
      400: 
        description: 400 Bad request
      401: 
        description: 401 Not Authorized
    201-400:
      description: Created / Bad request responses
      201: 
        description: 201 Created
      400: 
        description: 400 Bad request
    204-400:
      description: No Content / Bad request responses
      204: 
        description: 204 No Content
      400: 
        description: 400 Bad request
  requestBodies:
    CartID_ProductID:
        description: Form data for item to delete from a cart
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cart_id:
                    type: integer
                product_id:
                    type: integer
    CartItem:
        description: A product / item that goes into a cart
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cart_id:
                    type: integer
                product_id:
                    type: integer
                product_quantity:
                    type: integer
                product_price:
                    type: number
    Order: 
        description: Create an order from a user's cart
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user_id:  
                  type: integer
                cart_id:  
                  type: integer
    OrderID:
        description: ID of an order
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                order_id:
                    type: integer
    Product:
        description: Something for sale
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                    type: integer
                name:
                    type: string
                description:
                    type: string
                price:
                    type: number 
                image_url:
                    type: string
    ProductID: 
        description: ID of a product
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                product_id:
                      type: integer
    UserID: 
        description: ID of a user
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                  user_id:
                    type: integer
    UserIdEmailPassword:
        description: Username / user id / Email / password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              type: object
              properties:
                user_id:
                  type: integer
                username:
                  type: string
                email:
                  type: string
                password: 
                  type: string
    UserEmailPassword:
        description: Username / Email / Password
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password: 
                  type: string
